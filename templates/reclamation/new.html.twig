{% extends 'base.html.twig' %}

{% block title %}Nouvelle Réclamation{% endblock %}

{% block body %}
<div class="container animate-fade-in">
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Accueil</a></li>
            <li class="breadcrumb-item"><a href="{{ path('app_reclamation_index') }}">Réclamations</a></li>
            <li class="breadcrumb-item active" aria-current="page">Nouvelle réclamation</li>
        </ol>
    </nav>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card animate-fade-in">
                <div class="card-header">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-plus-circle me-2 fa-lg"></i>
                        <p class="section-subtitle mb-0">Contact us</p>
                    </div>
                    <h2 class="title mb-0">Nouvelle <span style="color: var(--text-purple);">Réclamation</span></h2>
                </div>
                
                <div class="card-body">
                    <div class="alert alert-info mb-4">
                        <i class="fas fa-info-circle me-2"></i>
                        Les champs marqués d'un <span class="text-danger">*</span> sont obligatoires.
                    </div>

                    {% for label, messages in app.flashes %}
                        {% for message in messages %}
                            <div class="alert alert-{{ label }} alert-dismissible fade show">
                                {{ message }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        {% endfor %}
                    {% endfor %}
                    
                    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'reclamation-form'}}) }}
                    {{ form_errors(form) }}
                    
                    <!-- Description du problème (obligatoire) -->
                    <div class="form-group mb-4">
                        {{ form_label(form.description, 'Description du problème <span class="text-danger">*</span>'|raw, {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(form.description, {
                            'attr': {
                                'class': 'form-control' ~ (form.description.vars.valid ? '' : ' is-invalid'),
                                'placeholder': 'Décrivez votre problème en détail...',
                                'rows': 5
                            }
                        }) }}
                        <div class="invalid-feedback" id="description-error">
                            {{ form_errors(form.description) }}
                        </div>
                        <div class="form-text text-muted">
                            <small><i class="fas fa-info-circle me-1"></i>Veuillez décrire clairement votre problème pour faciliter son traitement (minimum 10 caractères).</small>
                        </div>
                    </div>

                    <!-- Catégorie (obligatoire) -->
                    <div class="form-group mb-4">
                        {{ form_label(form.categorie, 'Catégorie <span class="text-danger">*</span>'|raw, {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(form.categorie, {
                            'attr': {
                                'class': 'form-control' ~ (form.categorie.vars.valid ? '' : ' is-invalid'),
                                'placeholder': 'Ex: Technique, Service client, Facturation...'
                            }
                        }) }}
                        <div class="invalid-feedback" id="categorie-error">
                            {{ form_errors(form.categorie) }}
                        </div>
                        <div class="form-text text-muted">
                            <small><i class="fas fa-tag me-1"></i>Catégoriser votre réclamation aide à l'orienter vers le bon service.</small>
                        </div>
                    </div>

                    <!-- Fichiers joints (optionnels) -->
                    <div class="row">
                        <!-- Image -->
                        <div class="col-md-6">
                            <div class="form-group mb-4">
                                {{ form_label(form.imageFile, 'Image (optionnel)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="custom-file">
                                    {{ form_widget(form.imageFile, {
                                        'attr': {
                                            'class': 'form-control' ~ (form.imageFile.vars.valid ? '' : ' is-invalid'),
                                            'accept': 'image/*'
                                        }
                                    }) }}
                                </div>
                                <div class="form-text text-muted">
                                    <small><i class="fas fa-image me-1"></i>Formats acceptés : JPEG, PNG, GIF (max 2MB)</small>
                                </div>
                                <div class="invalid-feedback">
                                    {{ form_errors(form.imageFile) }}
                                </div>
                            </div>
                        </div>
                        
                        <!-- PDF -->
                        <div class="col-md-6">
                            <div class="form-group mb-4">
                                {{ form_label(form.pdfFile, 'Document PDF (optionnel)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="custom-file">
                                    {{ form_widget(form.pdfFile, {
                                        'attr': {
                                            'class': 'form-control' ~ (form.pdfFile.vars.valid ? '' : ' is-invalid'),
                                            'accept': '.pdf'
                                        }
                                    }) }}
                                </div>
                                <div class="form-text text-muted">
                                    <small><i class="fas fa-file-pdf me-1"></i>Format accepté : PDF (max 5MB)</small>
                                </div>
                                <div class="invalid-feedback">
                                    {{ form_errors(form.pdfFile) }}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Boutons d'action -->
                    <div class="form-actions mt-4 d-flex justify-content-between">
                        <a href="{{ path('app_reclamation_index') }}" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-1"></i> Retour
                        </a>
                        
                        <button type="submit" class="btn" id="submit-btn">
                            <i class="fas fa-save me-1"></i> Enregistrer
                        </button>
                    </div>

                    {{ form_rest(form) }}
                    {{ form_end(form, {'render_rest': false}) }}
                </div>
            </div>
            
            <div class="text-center mt-4">
                <p class="text-champagne-pink">
                    <i class="fas fa-info-circle me-1"></i> Les réclamations sont généralement traitées dans un délai de 48 heures.
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('reclamation-form');
            const submitBtn = document.getElementById('submit-btn');
            const descriptionInput = document.querySelector('[name="reclamation[description]"]');
            const categorieInput = document.querySelector('[name="reclamation[categorie]"]');
            const descriptionError = document.getElementById('description-error');
            const categorieError = document.getElementById('categorie-error');

            // Fonction pour valider le formulaire côté client
            function validateForm(event) {
                let isValid = true;
                
                // Vérifier la description
                if (!descriptionInput.value.trim()) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionError.textContent = 'La description ne peut pas être vide';
                    isValid = false;
                } else if (descriptionInput.value.trim().length < 10) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionError.textContent = 'La description doit contenir au moins 10 caractères';
                    isValid = false;
                } else {
                    descriptionInput.classList.remove('is-invalid');
                    descriptionInput.classList.add('is-valid');
                }
                
                // Vérifier la catégorie
                if (!categorieInput.value.trim()) {
                    categorieInput.classList.add('is-invalid');
                    categorieError.textContent = 'La catégorie ne peut pas être vide';
                    isValid = false;
                } else {
                    categorieInput.classList.remove('is-invalid');
                    categorieInput.classList.add('is-valid');
                }
                
                // Si le formulaire n'est pas valide, empêcher la soumission
                if (!isValid) {
                    event.preventDefault();
                    event.stopPropagation();
                    
                    // Afficher une alerte en haut du formulaire
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        <strong>Erreur !</strong> Veuillez corriger les champs marqués en rouge avant de soumettre le formulaire.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    form.insertBefore(alertDiv, form.firstChild);
                    
                    // Faire défiler jusqu'au premier champ invalide
                    document.querySelector('.is-invalid').scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
                
                return isValid;
            }
            
            // Validation à la soumission du formulaire
            if (form) {
                form.addEventListener('submit', validateForm);
            }
            
            // Validation en temps réel pour la description
            if (descriptionInput) {
                descriptionInput.addEventListener('input', function() {
                    if (this.value.trim().length === 0) {
                        this.classList.add('is-invalid');
                        descriptionError.textContent = 'La description ne peut pas être vide';
                    } else if (this.value.trim().length < 10) {
                        this.classList.add('is-invalid');
                        descriptionError.textContent = 'La description doit contenir au moins 10 caractères';
                    } else {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }
            
            // Validation en temps réel pour la catégorie
            if (categorieInput) {
                categorieInput.addEventListener('input', function() {
                    if (this.value.trim().length === 0) {
                        this.classList.add('is-invalid');
                        categorieError.textContent = 'La catégorie ne peut pas être vide';
                    } else {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }

            // Supprimer tous les éléments relatifs au statut
            function removeStatusElements() {
                // Rechercher tous les éléments qui contiennent le texte "Statut:"
                const allElements = document.querySelectorAll('*');
                allElements.forEach(element => {
                    // Vérifier si le contenu textuel de l'élément contient "Statut:"
                    if (element.textContent && element.textContent.includes('Statut:')) {
                        // Remonter aux parents pour trouver l'élément à supprimer
                        let parent = element;
                        for (let i = 0; i < 3; i++) {
                            parent = parent.parentElement;
                            if (parent && (parent.tagName === 'DIV' || parent.tagName === 'FORM' || parent.tagName === 'SECTION' || parent.tagName === 'FIELDSET')) {
                                // Si on trouve un conteneur parent significatif, on le supprime
                                parent.remove();
                                return; // Sortir après avoir supprimé l'élément
                            }
                        }
                        // Si on n'a pas trouvé de parent significatif, supprimer l'élément lui-même
                        element.remove();
                    }
                });

                // Chercher les éléments select qui pourraient être relatifs au statut
                const statusSelects = document.querySelectorAll('select[name*="statut"], select[name*="Statut"]');
                statusSelects.forEach(select => {
                    const container = select.closest('div.form-group, div.mb-3, div.mb-4, fieldset');
                    if (container) {
                        container.remove();
                    } else {
                        select.remove();
                    }
                });
            }

            // Exécuter une première fois au chargement
            removeStatusElements();

            // Réexécuter après un court délai pour être sûr (parfois le DOM est modifié après le chargement initial)
            setTimeout(removeStatusElements, 500);
            setTimeout(removeStatusElements, 1000);
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .card {
            margin-top: 2rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            background-color: #3498db;
            color: white;
            padding: 1rem;
        }
        
        .card-header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }
        
        .form-actions {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
        }
        
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }
        
        .is-invalid {
            border-color: #dc3545 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }
        
        .is-valid {
            border-color: #198754 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }
        
        .is-invalid ~ .invalid-feedback {
            display: block;
        }
        
        .text-danger {
            color: #dc3545 !important;
        }
    </style>
{% endblock %} 