{% extends 'basee.html.twig' %}

{% block title %}Edit Post{% endblock %}

{% block body %}
    {% include 'Navbar/navbar_login.html.twig' %}

    <div class="container animate-fade-in">
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Home</a></li>
                <li class="breadcrumb-item"><a href="{{ path('app_post_index') }}">Posts</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit Post</li>
            </ol>
        </nav>

        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card animate-fade-in">
                    <div class="card-header">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-plus-circle me-2 fa-lg"></i>
                            <p class="section-subtitle mb-0">Edit Content</p>
                        </div>
                        <h2 class="title mb-0">Edit <span style="color: #6B46C1;">Post</span></h2>
                    </div>

                    <div class="card-body">
                        <div class="alert alert-info mb-4">
                            <i class="fas fa-info-circle me-2"></i>
                            Fields marked with a <span class="text-danger">*</span> are required.
                        </div>

                        {% for label, messages in app.flashes %}
                            {% for message in messages %}
                                <div class="alert alert-{{ label }} alert-dismissible fade show">
                                    {{ message }}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            {% endfor %}
                        {% endfor %}

                        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'post-form'}}) }}
                        {{ form_errors(form) }}

                        <!-- Titre (obligatoire) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.titre, {
                                'attr': {
                                    'class': 'form-control' ~ (form.titre.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Title *',
                                }
                            }) }}
                            <div class="invalid-feedback" id="titre-error">
                                {{ form_errors(form.titre) }}
                            </div>
                            <div class="form-text text-muted">
                                <small><i class="fas fa-info-circle me-1"></i>Please provide a concise title.</small>
                            </div>
                        </div>

                        <!-- Description (obligatoire) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.description, {
                                'attr': {
                                    'class': 'form-control' ~ (form.description.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Description *',
                                    'rows': 5
                                }
                            }) }}
                            <div class="invalid-feedback" id="description-error">
                                {{ form_errors(form.description) }}
                            </div>
                            <div class="form-text text-muted">
                                <small><i class="fas fa-info-circle me-1"></i>Provide a detailed description (minimum 10 characters).</small>
                            </div>
                        </div>

                        <!-- Image (optionnel) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.imageName, {
                                'attr': {
                                    'class': 'form-control' ~ (form.imageName.vars.valid ? '' : ' is-invalid'),
                                    'accept': 'image/*',
                                    'placeholder': 'Image (optional)',
                                }
                            }) }}
                            <div class="form-text text-muted">
                                <small><i class="fas fa-image me-1"></i>Accepted formats: JPEG, PNG (max 2MB)</small>
                            </div>
                            <div class="invalid-feedback">
                                {{ form_errors(form.imageName) }}
                            </div>
                        </div>

                        <!-- CatÃ©gorie (obligatoire) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.categorie, {
                                'attr': {
                                    'class': 'form-control' ~ (form.categorie.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Category *',
                                }
                            }) }}
                            <div class="invalid-feedback" id="categorie-error">
                                {{ form_errors(form.categorie) }}
                            </div>
                            <div class="form-text text-muted">
                                <small><i class="fas fa-tag me-1"></i>Categorize your post for better organization.</small>
                            </div>
                        </div>

                        <!-- LikeCount (obligatoire) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.likeCount, {
                                'attr': {
                                    'class': 'form-control' ~ (form.likeCount.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Like Count *',
                                }
                            }) }}
                            <div class="invalid-feedback" id="likeCount-error">
                                {{ form_errors(form.likeCount) }}
                            </div>
                            <div class="form-text text-muted">
                                <small><i class="fas fa-thumbs-up me-1"></i>Enter the number of likes.</small>
                            </div>
                        </div>

                        <!-- DislikeCount (obligatoire) -->
                        <div class="form-group mb-4">
                            {{ form_widget(form.dislikeCount, {
                                'attr': {
                                    'class': 'form-control' ~ (form.dislikeCount.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Dislike Count *',
                                }
                            }) }}
                            <div class="invalid-feedback" id="dislikeCount-error">
                                {{ form_errors(form.dislikeCount) }}
                            </div>
                            <div class="form-text text-muted">
                                <small><i class="fas fa-thumbs-down me-1"></i>Enter the number of dislikes.</small>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-actions mt-4 d-flex justify-content-between">
                            <a href="{{ path('app_post_index') }}" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-1"></i> Back
                            </a>
                            <button type="submit" class="btn btn-primary" id="submit-btn">
                                <i class="fas fa-save me-1"></i> Save
                            </button>
                        </div>

                        {{ form_rest(form) }}
                        {{ form_end(form, {'render_rest': false}) }}
                    </div>
                </div>

                <div class="text-center mt-4">
                    <p class="text-info">
                        <i class="fas fa-info-circle me-1"></i> Posts are typically reviewed within 24 hours.
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('post-form');
            const submitBtn = document.getElementById('submit-btn');
            const titreInput = document.querySelector('[name="post[titre]"]');
            const descriptionInput = document.querySelector('[name="post[description]"]');
            const categorieInput = document.querySelector('[name="post[categorie]"]');
            const likeCountInput = document.querySelector('[name="post[likeCount]"]');
            const dislikeCountInput = document.querySelector('[name="post[dislikeCount]"]');
            const titreError = document.getElementById('titre-error');
            const descriptionError = document.getElementById('description-error');
            const categorieError = document.getElementById('categorie-error');
            const likeCountError = document.getElementById('likeCount-error');
            const dislikeCountError = document.getElementById('dislikeCount-error');

            function validateForm(event) {
                let isValid = true;

                // Validate Titre
                if (!titreInput.value.trim()) {
                    titreInput.classList.add('is-invalid');
                    titreError.textContent = 'The title cannot be empty';
                    isValid = false;
                } else {
                    titreInput.classList.remove('is-invalid');
                    titreInput.classList.add('is-valid');
                }

                // Validate Description
                if (!descriptionInput.value.trim()) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionError.textContent = 'The description cannot be empty';
                    isValid = false;
                } else if (descriptionInput.value.trim().length < 10) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionError.textContent = 'Description must be at least 10 characters';
                    isValid = false;
                } else {
                    descriptionInput.classList.remove('is-invalid');
                    descriptionInput.classList.add('is-valid');
                }

                // Validate CatÃ©gorie
                if (!categorieInput.value.trim()) {
                    categorieInput.classList.add('is-invalid');
                    categorieError.textContent = 'The category cannot be empty';
                    isValid = false;
                } else {
                    categorieInput.classList.remove('is-invalid');
                    categorieInput.classList.add('is-valid');
                }

                // Validate LikeCount
                if (likeCountInput.value < 0 || !likeCountInput.value.trim()) {
                    likeCountInput.classList.add('is-invalid');
                    likeCountError.textContent = 'Like count must be a non-negative number';
                    isValid = false;
                } else {
                    likeCountInput.classList.remove('is-invalid');
                    likeCountInput.classList.add('is-valid');
                }

                // Validate DislikeCount
                if (dislikeCountInput.value < 0 || !dislikeCountInput.value.trim()) {
                    dislikeCountInput.classList.add('is-invalid');
                    dislikeCountError.textContent = 'Dislike count must be a non-negative number';
                    isValid = false;
                } else {
                    dislikeCountInput.classList.remove('is-invalid');
                    dislikeCountInput.classList.add('is-valid');
                }

                if (!isValid) {
                    event.preventDefault();
                    event.stopPropagation();

                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        <strong>Error!</strong> Please correct the fields marked in red before submitting the form.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    form.insertBefore(alertDiv, form.firstChild);

                    document.querySelector('.is-invalid').scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }

                return isValid;
            }

            if (form) {
                form.addEventListener('submit', validateForm);
            }

            // Real-time validation for inputs
            [titreInput, descriptionInput, categorieInput, likeCountInput, dislikeCountInput].forEach(input => {
                if (input) {
                    input.addEventListener('input', function() {
                        if (!this.value.trim()) {
                            this.classList.add('is-invalid');
                            document.getElementById(this.name.replace('post[', '').replace(']', '') + '-error').textContent = `This field cannot be empty`;
                        } else if (this === descriptionInput && this.value.trim().length < 10) {
                            this.classList.add('is-invalid');
                            descriptionError.textContent = 'Description must be at least 10 characters';
                        } else if ((this === likeCountInput || this === dislikeCountInput) && this.value < 0) {
                            this.classList.add('is-invalid');
                            document.getElementById(this.name.replace('post[', '').replace(']', '') + '-error').textContent = `This field must be a non-negative number`;
                        } else {
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        }
                    });
                }
            });
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .card {
            margin-top: 2rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            border: none;
            border-radius: 10px;
        }

        .card-header {
            background-color: #3498db;
            color: white;
            padding: 1.5rem;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }

        .card-header h2 {
            margin: 0;
            font-size: 1.75rem;
            font-weight: 600;
        }

        .card-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .form-control {
            background-color: #2c2f3f !important; /* dark bg */
            border: 1px solid #ced4da;
            border-radius: 8px;
            padding: 0.75rem;
            font-size: 1rem;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            color: #000000; /* Set input values to black */
        }

        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
            outline: none;
        }

        .form-check-input {
            margin-top: 0.3rem;
        }

        .form-check-label {
            font-size: 1rem;
            color: #ffffff; /* Set to white to blend with the background */
        }

        /* Placeholder Styling */
        .form-control::placeholder {
            color: #ffffff !important; /* Set placeholders to white */
            opacity: 1;
            font-style: italic;
        }

        .form-actions {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
        }

        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }

        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #5a6268;
        }

        .is-invalid {
            border-color: #dc3545 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }

        .is-valid {
            border-color: #198754 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }

        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545; /* Validation messages are already red */
        }

        .is-invalid ~ .invalid-feedback {
            display: block;
        }

        .text-danger {
            color: #dc3545 !important;
        }

        .form-text {
            font-size: 0.85rem;
            color: #6c757d; /* â light grey for better visibility on white */
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        /* Beautify the overall form container */
        .container {
            max-width: 900px;
        }

        .alert-info {
            background-color: #e7f3ff;
            border-color: #b6d4fe;
            color: #31708f;
            border-radius: 8px;
        }

        .text-info {
            color: #31708f !important;
        }
    </style>
{% endblock %}