{% extends 'base.html.twig' %}

{% block title %}Événements à venir{% endblock %}

{% block body %}
    <div class="header">
        <div class="header-content">
            <h1 class="page-title">Événements à venir</h1>
            <a href="{{ path('app_sign_in') }}" class="btn btn-logout">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>

    <div class="events-container">
        <div class="events-list">
            {% for evenement in evenements %}
                <div class="event-card">
                    <div class="event-card-left">
                        <div class="event-icon">
                            <i class="fas fa-gamepad"></i>
                        </div>
                        <div class="event-info">
                            <h2 class="event-name">{{ evenement.nom }}</h2>
                            <span class="event-tag">{{ evenement.type|default('Type par défaut') }}</span>
                            <span class="event-date-time">{{ evenement.date|date('d/m/Y H:i') }}</span>
                        </div>
                    </div>

                    <div class="event-card-right">
                        <div class="event-location">
                            <i class="fas fa-map-marker-alt"></i> {{ evenement.localisation }}
                        </div>
                        <div class="available-spots">
                           <i class="fas fa-users"></i> Places disponibles: {{ evenement.capacite }}
                        </div>
                        <button class="btn btn-primary reserve-btn" 
                                data-event-id="{{ evenement.id }}"
                                data-max-places="{{ evenement.capacite }}"
                                data-event-name="{{ evenement.nom }}"
                                onclick="reserverPlaces(this)">
                            <i class="fas fa-ticket-alt"></i> Réserver
                        </button>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>

    <style>
        :root {
            --primary-color: #6a1b9a;
            --primary-hover: #9c27b0;
            --secondary-color: #9c27b0;
            --background-dark: #1a1625;
            --card-bg: rgba(26, 13, 33, 0.9);
            --text-light: #ffffff;
            --text-purple: #b388ff;
            --text-muted: #a8a8b3;
            --border-color: rgba(255, 255, 255, 0.1);
            --hover-bg: rgba(255, 255, 255, 0.05);
        }

        body {
            background-color: var(--background-dark);
            color: var(--text-light);
            font-family: 'Poppins', sans-serif;
        }

        .events-container {
            padding: 2.5rem;
            max-width: 1200px;
            margin: 2rem auto;
        }

        .header {
            background-color: var(--card-bg);
            padding: 1rem 2rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn-logout {
            background-color: #dc3545;
            color: white;
            padding: 0.6rem 1.2rem;
            border-radius: 12px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.6rem;
            transition: all 0.3s ease;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        .btn-logout:hover {
            background-color: #c82333;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
        }

        .page-title {
            color: var(--text-purple);
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0;
            text-align: left;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            padding-bottom: 0.5rem;
        }

        .page-title::after {
            display: none;
        }

        .events-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
        }

        .event-card {
            background-color: var(--card-bg) !important;
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 1.5rem 2rem;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }

        .event-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

        .event-card-left {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .event-icon {
            min-width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            color: var(--text-light);
            box-shadow: 0 4px 10px rgba(106, 27, 154, 0.3);
        }

        .event-info {
            display: flex;
            flex-direction: column;
            gap: 0.4rem;
        }

        .event-name {
            font-size: 1.4rem;
            font-weight: 600;
            margin: 0;
            color: var(--text-light);
        }

        .event-tag {
            background-color: var(--primary-color);
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.75rem;
            display: inline-block;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            align-self: flex-start;
        }
        
        .event-date-time {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .event-card-right {
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* Align items to start */
            gap: 0.8rem; /* Increased gap */
            border-top: 1px solid var(--border-color);
            padding-top: 1rem;
            margin-top: 1rem;
        }

        .event-location,
        .available-spots {
            font-size: 0.95rem;
            color: var(--text-muted);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .reserve-btn {
            align-self: stretch; /* Make button take full width */
            margin-top: 0.5rem; /* Add margin top */
            justify-content: center; /* Center icon and text */
        }

        /* Button Styles (copied from reservation index) */
        .btn {
            padding: 0.6rem 1.2rem;
            border-radius: 12px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.6rem;
            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
            z-index: 1;
            cursor: pointer;
            border: none;
            text-decoration: none;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            transition: width 0.3s ease;
            z-index: -1;
        }
        
        .btn:hover::before {
            width: 100%;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: var(--text-light);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(106, 27, 154, 0.4);
        }
        
        @media (max-width: 768px) {
            .events-list {
                grid-template-columns: 1fr;
            }
            .header-content {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            .page-title {
                text-align: center;
            }
        }
    </style>

    <script>
        // Function updated to get data from button attributes
        function reserverPlaces(buttonElement) {
            const eventId = buttonElement.dataset.eventId;
            const maxPlaces = parseInt(buttonElement.dataset.maxPlaces);
            const eventName = buttonElement.dataset.eventName;

            const places = prompt(`Combien de places souhaitez-vous réserver pour ${eventName} ? (Maximum: ${maxPlaces})`);
            
            if (places === null) return; // If user clicks Cancel
            
            const nbPlaces = parseInt(places);
            
            if (isNaN(nbPlaces) || nbPlaces <= 0) {
                alert('Veuillez entrer un nombre valide de places.');
                return;
            }
            
            if (nbPlaces > maxPlaces) {
                alert(`Désolé, il n'y a que ${maxPlaces} places disponibles.`);
                return;
            }

            // Prepare data as FormData
            const formData = new FormData();
            formData.append('eventId', eventId);
            formData.append('nombrePersonnes', nbPlaces);
            // Assuming you have a way to get the CSRF token if needed
            // formData.append('_token', 'YOUR_CSRF_TOKEN_HERE');

            // Send reservation to server
            fetch('{{ path('app_reservation_new') }}', {
                method: 'POST',
                body: formData // Send FormData directly
            })
            .then(response => {
                // Check if response is OK (status 200-299)
                if (!response.ok) {
                    // Try to parse error message from JSON response
                    return response.json().then(errData => {
                         throw new Error(errData.message || `Erreur réseau: ${response.statusText}`);
                    }).catch(() => {
                        // Fallback if response is not JSON or doesn't have message
                        throw new Error(`Erreur réseau: ${response.statusText}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    alert('Réservation effectuée avec succès!');
                    location.reload();
                } else {
                    // Display specific error message from server if available
                    alert(data.message || 'Une erreur est survenue lors de la réservation.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Display the caught error message to the user
                alert(error.message || 'Une erreur est survenue lors de la communication avec le serveur.');
            });
        }
    </script>
{% endblock %} 