{% extends 'reclamation/index.html.twig' %}

{% block title %}Nouvelle Réclamation{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Animation pour les erreurs */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }

        .shake {
            animation: shake 0.8s ease-in-out;
        }

        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border-radius: 0.25rem;
            background-color: rgba(220, 53, 69, 0.1);
            border-left: 4px solid #dc3545;
            font-size: 0.875em;
            color: #dc3545;
        }

        .is-invalid ~ .invalid-feedback {
            display: block;
        }

        .alert-danger {
            border-left: 5px solid #842029;
            background-color: #f8d7da;
            color: #842029;
            padding: 1rem;
            margin-bottom: 1rem;
            animation: shake 0.8s ease-in-out;
        }

        .alert-danger ul {
            margin-bottom: 0;
            padding-left: 1.5rem;
        }

        .alert-danger li {
            margin-top: 0.5rem;
        }

        .card {
            margin-top: 2rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            background-color: #3498db;
            color: white;
            padding: 1rem;
        }
        
        .card-header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }
        
        .form-actions {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
        }
        
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }
        
        .is-invalid {
            border-color: #dc3545 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }
        
        .is-valid {
            border-color: #198754 !important;
            padding-right: calc(1.5em + 0.75rem) !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right calc(0.375em + 0.1875rem) center !important;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }
        
        .is-invalid ~ .invalid-feedback {
            display: block;
        }
        
        .text-danger {
            color: #dc3545 !important;
        }
        
        .voice-input-wrapper {
            position: relative;
        }
        
        .translate-btn {
            position: absolute;
            right: 40px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            z-index: 10;
            transition: all 0.3s ease;
        }

        .translate-btn:hover {
            color: #0d6efd;
        }

        .translate-btn.active {
            color: #0d6efd;
        }

        .translation-dropdown {
            position: absolute;
            right: 40px;
            top: calc(50% + 20px);
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: none;
            z-index: 1000;
        }

        .translation-dropdown.show {
            display: block;
        }

        .translation-dropdown button {
            display: block;
            width: 100%;
            padding: 8px 16px;
            border: none;
            background: none;
            text-align: left;
            cursor: pointer;
        }

        .translation-dropdown button:hover {
            background-color: #f8f9fa;
        }

        .voice-input-btn {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
            z-index: 10;
        }

        .voice-input-btn:hover {
            color: var(--text-purple);
            background-color: rgba(0, 0, 0, 0.1);
        }

        .voice-input-btn.recording {
            color: #dc3545;
            animation: pulse 1.5s infinite;
            background-color: rgba(220, 53, 69, 0.1);
        }

        .voice-status {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            border-radius: 8px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(0.95); }
            100% { opacity: 1; transform: scale(1); }
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
{% endblock %} 

{% block body %}
<style>body, .container, .content, .main-content { background: #fff !important; }</style>
{% include 'Navbar/navbar_login.html.twig' %}

<div class="container animate-fade-in">
    

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card animate-fade-in">
                <div class="card-header">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-plus-circle me-2 fa-lg"></i>
                        <p class="section-subtitle mb-0">Contact us</p>
                    </div>
                    <h2 class="title mb-0">Nouvelle <span style="color: var(--text-purple);">Réclamation</span></h2>
                </div>
                
                <div class="card-body">
                    <div class="alert alert-info mb-4">
                        <i class="fas fa-info-circle me-2"></i>
                        Les champs marqués d'un <span class="text-danger">*</span> sont obligatoires.
                    </div>

                    {% if not form.vars.valid %}
                    <div class="alert alert-danger mb-4">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Attention !</strong> Veuillez corriger les erreurs suivantes :
                        <ul class="mb-0 mt-2">
                            {% for error in form.vars.errors %}
                                <li>{{ error.message }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                    {% endif %}

                    {% for label, messages in app.flashes %}
                        {% for message in messages %}
                            <div class="alert alert-{{ label }} alert-dismissible fade show">
                                {{ message }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        {% endfor %}
                    {% endfor %}
                    
                    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'reclamation-form'}}) }}
                    {{ form_errors(form) }}
                    
                    <!-- Description du problème -->
                    <div class="form-group mb-4">
                        {{ form_label(form.description, 'Description du problème'|raw, {'label_attr': {'class': 'form-label'}}) }}
                        <div class="voice-input-wrapper">
                            {{ form_widget(form.description, {
                                'attr': {
                                    'class': 'form-control' ~ (form.description.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Décrivez votre problème en détail ou utilisez le microphone pour dicter...',
                                    'rows': 5
                                }
                            }) }}
                            <button type="button" class="translate-btn" id="translateBtnDescription">
                                <i class="fas fa-language"></i>
                            </button>
                            <button type="button" class="voice-input-btn" id="voiceInputBtn">
                                <i class="fas fa-microphone"></i>
                            </button>
                            <div class="translation-dropdown" id="translationDropdownDescription">
                                <button type="button" data-lang="en">Traduire en Anglais</button>
                                <button type="button" data-lang="fr">Traduire en Français</button>
                            </div>
                            <div class="invalid-feedback" id="description-error">
                                {% for error in form.description.vars.errors %}
                                    <div><i class="fas fa-exclamation-circle me-1"></i>{{ error.message }}</div>
                                {% endfor %}
                            </div>
                        </div>
                        <div class="form-text text-muted">
                            <small><i class="fas fa-info-circle me-1"></i>Vous pouvez saisir votre texte ou utiliser la dictée vocale</small>
                        </div>
                    </div>

                    <!-- Catégorie -->
                    <div class="form-group mb-4">
                        {{ form_label(form.categorie, 'Catégorie'|raw, {'label_attr': {'class': 'form-label'}}) }}
                        <div class="voice-input-wrapper">
                            {{ form_widget(form.categorie, {
                                'attr': {
                                    'class': 'form-control' ~ (form.categorie.vars.valid ? '' : ' is-invalid'),
                                    'placeholder': 'Ex: Technique, Service client, Facturation...'
                                }
                            }) }}
                            <button type="button" class="translate-btn" id="translateBtnCategorie">
                                <i class="fas fa-language"></i>
                            </button>
                            <button type="button" class="voice-input-btn" id="voiceInputBtnCategorie">
                                <i class="fas fa-microphone"></i>
                            </button>
                            <div class="translation-dropdown" id="translationDropdownCategorie">
                                <button type="button" data-lang="en">Traduire en Anglais</button>
                                <button type="button" data-lang="fr">Traduire en Français</button>
                            </div>
                            <div class="invalid-feedback" id="categorie-error">
                                {% for error in form.categorie.vars.errors %}
                                <div><i class="fas fa-exclamation-circle me-1"></i>{{ error.message }}</div>
                            {% endfor %}
                        </div>
                        <div class="form-text text-muted">
                            <small><i class="fas fa-tag me-1"></i>Vous pouvez saisir la catégorie ou la dicter</small>
                        </div>
                    </div>

                    <!-- Fichiers joints (optionnels) -->
                    <div class="row">
                        <!-- Image -->
                        <div class="col-md-6">
                            <div class="form-group mb-4">
                                {{ form_label(form.imageFile, 'Image (optionnel)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="custom-file">
                                    {{ form_widget(form.imageFile, {
                                        'attr': {
                                            'class': 'form-control' ~ (form.imageFile.vars.valid ? '' : ' is-invalid'),
                                            'accept': 'image/*'
                                        }
                                    }) }}
                                </div>
                                <div class="form-text text-muted">
                                    <small><i class="fas fa-image me-1"></i>Formats acceptés : JPEG, PNG, GIF (max 2MB)</small>
                                </div>
                                <div class="invalid-feedback">
                                    {{ form_errors(form.imageFile) }}
                                </div>
                            </div>
                        </div>
                        
                        <!-- PDF -->
                        <div class="col-md-6">
                            <div class="form-group mb-4">
                                {{ form_label(form.pdfFile, 'Document PDF (optionnel)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="custom-file">
                                    {{ form_widget(form.pdfFile, {
                                        'attr': {
                                            'class': 'form-control' ~ (form.pdfFile.vars.valid ? '' : ' is-invalid'),
                                            'accept': '.pdf'
                                        }
                                    }) }}
                                </div>
                                <div class="form-text text-muted">
                                    <small><i class="fas fa-file-pdf me-1"></i>Format accepté : PDF (max 5MB)</small>
                                </div>
                                <div class="invalid-feedback">
                                    {{ form_errors(form.pdfFile) }}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Boutons d'action -->
                    <div class="form-actions mt-4 d-flex justify-content-between">
                        <a href="{{ path('app_reclamation_index') }}" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-1"></i> Retour
                        </a>
                        
                        <button type="submit" class="btn" id="submit-btn">
                            <i class="fas fa-save me-1"></i> Enregistrer
                        </button>
                    </div>

                    {{ form_rest(form) }}
                    {{ form_end(form, {'render_rest': false}) }}
                </div>
            </div>
            
            <div class="text-center mt-4">
                <p class="text-champagne-pink">
                    <i class="fas fa-info-circle me-1"></i> Les réclamations sont généralement traitées dans un délai de 48 heures.
                </p>
            </div>
        </div>
    </div>
</div>

<!-- Indicateur de statut de la reconnaissance vocale -->
<div class="voice-status" id="voiceStatus">
    <i class="fas fa-microphone-alt me-2"></i>
    <span>Écoute en cours...</span>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/bad-words.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('reclamation-form');
            const submitBtn = document.getElementById('submit-btn');
            const descriptionInput = document.querySelector('[name="reclamation[description]"]');
            const categorieInput = document.querySelector('[name="reclamation[categorie]"]');
            const descriptionError = document.getElementById('description-error');
            const categorieError = document.getElementById('categorie-error');
            const voiceInputBtn = document.getElementById('voiceInputBtn');
            const voiceInputBtnCategorie = document.getElementById('voiceInputBtnCategorie');
            const voiceStatus = document.getElementById('voiceStatus');
            
            let isRecording = false;
            let currentInput = null;
            let recognition = null;

            // Fonction pour vérifier les bad words dans un champ
            function checkBadWords(input, error) {
                const text = input.value.trim();
                const result = containsBadWords(text);
                
                if (result.hasBadWords) {
                    input.classList.add('is-invalid');
                    error.textContent = 'Votre texte contient des mots inappropriés. Veuillez rester respectueux.';
                    
                    // Créer une alerte temporaire
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger alert-dismissible fade show mt-2';
                    alertDiv.innerHTML = `
                        <strong>Attention !</strong> Votre message contient un langage inapproprié.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    input.parentNode.insertBefore(alertDiv, input.nextSibling);
                    
                    // Supprimer l'alerte après 5 secondes
                    setTimeout(() => {
                        alertDiv.remove();
                    }, 5000);
                    
                    return false;
                }
                return true;
            }

            // Modifier la fonction validateInput existante
            function validateInput(input) {
                const isDescription = input === descriptionInput;
                const error = isDescription ? descriptionError : categorieError;
                const value = input.value.trim();

                input.classList.remove('is-invalid', 'is-valid');

                // Vérifier d'abord les bad words
                if (!checkBadWords(input, error)) {
                    return false;
                }

                if (!value) {
                    input.classList.add('is-invalid');
                    error.textContent = `Le champ ${isDescription ? 'description' : 'catégorie'} ne peut pas être vide`;
                    return false;
                } else if (isDescription && value.length < 10) {
                    input.classList.add('is-invalid');
                    error.textContent = 'La description doit contenir au moins 10 caractères';
                    return false;
                    } else {
                    input.classList.add('is-valid');
                    return true;
                }
            }

            // Modifier la fonction validateForm existante
            function validateForm(event) {
                const isDescriptionValid = validateInput(descriptionInput);
                const isCategorieValid = validateInput(categorieInput);

                if (!isDescriptionValid || !isCategorieValid) {
                    event.preventDefault();
                    event.stopPropagation();
                    
                    const firstInvalid = !isDescriptionValid ? descriptionInput : categorieInput;
                    firstInvalid.focus();
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }

            // Ajouter la vérification en temps réel pour la reconnaissance vocale
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                recognition = new (window.webkitSpeechRecognition || window.SpeechRecognition)();
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.lang = 'fr-FR';

                recognition.onresult = function(event) {
                    const result = event.results[event.results.length - 1];
                    if (result.isFinal && currentInput) {
                        const text = result[0].transcript;
                        // Vérifier les bad words avant d'ajouter le texte
                        const tempInput = document.createElement('input');
                        tempInput.value = text;
                        const error = currentInput === descriptionInput ? descriptionError : categorieError;
                        
                        if (checkBadWords(tempInput, error)) {
                            if (currentInput === descriptionInput) {
                                currentInput.value += (currentInput.value ? ' ' : '') + text;
                            } else {
                                currentInput.value = text;
                            }
                            validateInput(currentInput);
                        } else {
                            // Arrêter l'enregistrement si un bad word est détecté
                            stopRecording();
                        }
                    }
                };

                // Gérer les erreurs
                recognition.onerror = function(event) {
                    console.error('Erreur de reconnaissance vocale:', event.error);
                    stopRecording();
                    alert('Une erreur est survenue avec la reconnaissance vocale. Veuillez réessayer.');
                };

                // Gérer la fin de la reconnaissance
                recognition.onend = function() {
                    if (isRecording) {
                        recognition.start();
                    }
                };
                    } else {
                // Cacher les boutons si la reconnaissance n'est pas supportée
                voiceInputBtn.style.display = 'none';
                voiceInputBtnCategorie.style.display = 'none';
                console.warn('La reconnaissance vocale n\'est pas supportée par ce navigateur.');
            }

            function startRecording(input, button) {
                if (isRecording && currentInput !== input) {
                    stopRecording();
                }
                
                isRecording = true;
                currentInput = input;
                button.classList.add('recording');
                voiceStatus.style.display = 'block';
                
                try {
                    recognition.start();
                } catch (e) {
                    if (e.name === 'InvalidStateError') {
                        recognition.stop();
                        setTimeout(() => recognition.start(), 200);
                    }
                }
            }

            function stopRecording() {
                if (!isRecording) return;
                
                isRecording = false;
                const button = currentInput === descriptionInput ? voiceInputBtn : voiceInputBtnCategorie;
                button.classList.remove('recording');
                voiceStatus.style.display = 'none';
                currentInput = null;
                recognition.stop();
            }

            function toggleRecording(input, button) {
                if (!recognition) {
                    alert('La reconnaissance vocale n\'est pas supportée par votre navigateur.');
                    return;
                }

                if (isRecording && currentInput === input) {
                    stopRecording();
                } else {
                    startRecording(input, button);
                }
            }

            // Gestionnaires d'événements pour les boutons
            voiceInputBtn.addEventListener('click', () => toggleRecording(descriptionInput, voiceInputBtn));
            voiceInputBtnCategorie.addEventListener('click', () => toggleRecording(categorieInput, voiceInputBtnCategorie));

            // Configuration de la traduction
            async function translateText(text, targetLang) {
                try {
                    const sourceLang = targetLang === 'en' ? 'fr' : 'en';
                    const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${sourceLang}|${targetLang}`);
                    const data = await response.json();
                    
                    if (data.responseStatus === 200 && data.responseData.translatedText) {
                        return data.responseData.translatedText;
                    } else {
                        throw new Error(data.responseDetails || 'Erreur de traduction');
                    }
                } catch (error) {
                    console.error('Erreur de traduction:', error);
                    alert('Une erreur est survenue lors de la traduction. Veuillez réessayer.');
                    return null;
                }
            }

            function setupTranslation(input, btnId, dropdownId) {
                const translateBtn = document.getElementById(btnId);
                const dropdown = document.getElementById(dropdownId);
                
                translateBtn.addEventListener('click', () => {
                    dropdown.classList.toggle('show');
                });

                dropdown.querySelectorAll('button').forEach(button => {
                    button.addEventListener('click', async () => {
                        const targetLang = button.dataset.lang;
                        const text = input.value.trim();
                        
                        if (text) {
                            const translatedText = await translateText(text, targetLang);
                            if (translatedText) {
                                input.value = translatedText;
                                validateInput(input);
                            }
                        }
                        
                        dropdown.classList.remove('show');
                    });
                });

                // Fermer le dropdown si on clique ailleurs
                document.addEventListener('click', (e) => {
                    if (!translateBtn.contains(e.target) && !dropdown.contains(e.target)) {
                        dropdown.classList.remove('show');
                    }
                });
            }

            // Configuration des boutons de traduction
            setupTranslation(descriptionInput, 'translateBtnDescription', 'translationDropdownDescription');
            setupTranslation(categorieInput, 'translateBtnCategorie', 'translationDropdownCategorie');

            // Événements de validation
            form.addEventListener('submit', validateForm);
            descriptionInput.addEventListener('input', () => validateInput(descriptionInput));
            categorieInput.addEventListener('input', () => validateInput(categorieInput));
            descriptionInput.addEventListener('blur', () => validateInput(descriptionInput));
            categorieInput.addEventListener('blur', () => validateInput(categorieInput));
        });
    </script>
{% endblock %}

